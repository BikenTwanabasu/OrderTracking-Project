
@*
@model CollegeProject.Models.OrderAndStudentModel

@{
    ViewData["Title"] = "Create Order";
    Layout = null;

}

<h2 style="text-align:center">Create Order</h2>


@Html.AntiForgeryToken()

<div class="form-container">
    <h3 style="text-align:center">Customer Details</h3>

  
    <div class="form-group">
        @Html.LabelFor(model => model.customer.CustomerName, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.CustomerName, new { @class = "form-control custom-input", required = "required" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.customer.CustomerAddress, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.CustomerAddress, new { @class = "form-control custom-input", required = "required" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.customer.Phone, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.Phone, new { @class = "form-control custom-input", required = "required" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.customer.Email, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.Email, new { @class = "form-control custom-input", required = "required", type = "email" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.customer.OrderReceiveDate, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.OrderReceiveDate, new { @class = "form-control custom-input", required = "required", type = "date" })
    </div>

    <h3 style="text-align:center">Order Details</h3>


    <div class="form-group">
        @Html.LabelFor(model => model.order.Amount, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.order.Amount, new { @class = "form-control custom-input", type = "number" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.order.PaymentStatus, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(model => model.order.PaymentStatus,
        new SelectList(new[] { "COD", "Pre-Payment", "Online", "Credit" }),
        "Select Payment Status", new { @class = "form-control custom-input", required = "required" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.order.DeliveryAddress, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.order.DeliveryAddress, new { @class = "form-control custom-input", required = "required" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.order.DeliveryDate, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.order.DeliveryDate, new { @class = "form-control custom-input", required = "required", type = "date" })
    </div>


    <button type="submit" onclick="CreateOrder()" class="btn btn-primary custom-submit-btn">Create Order</button>
</div>

<script>
   function CreateOrder() {
    debugger;
    var CustomerName = $("#customer_CustomerName").val();
    var CustomerAddress = $("#customer_CustomerAddress").val();
    var Phone = $("#customer_Phone").val();
    var Email = $("#customer_Email").val();
    var OrderReceiveDate = $("#customer_OrderReceiveDate").val();
    var Amount = $("#order_Amount").val();
    var PaymentStatus = $("#order_PaymentStatus").val();
    var DeliveryAddress = $("#order_DeliveryAddress").val();
    var DeliveryDate = $("#order_DeliveryDate").val();
    var CompanyId=@ViewBag.I;
    var orderAndStudentModel;
    var customer;
    var order;

            if (!Phone || !CustomerAddress || !DeliveryDate || !Amount || !OrderReceiveDate || !PaymentStatus || !Phone) {
            alert("Please fill in all the fields.");
            return ;
        }
        if (!/^(98|97)[\d]{8}$/.test(Phone) && !/^(01)[\d]{6}$/.test(Phone)) {
            alert("Customer Phone Number must start from 98/97/01 and must be of 8 or 10 numbers");
            return;
        }

        var OrderReceiveDateObj = new Date(OrderReceiveDate)
        var DeliveryDateObj = new Date(DeliveryDate)

        if(OrderReceiveDate>=DeliveryDateObj){
            alert("DeliveryDate  must be later than Order Created Date");
            return;
        }
        var emailRegex =/^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
        if(!emailRegex.test(Email)){
            alert("Invalid Email Format");
            return;
        }

    $.ajax({
        url: '@Url.Action("OrderCreation","Project")',
        type: 'Post',
        dataType: 'Json',
        data: {
            orderAndStudentModel: {
                customer: {
                    CustomerName: CustomerName,
                    CustomerAddress: CustomerAddress,
                    Phone: Phone,
                    Email: Email,
                    OrderReceiveDate: OrderReceiveDate
                },
                order: {
                    Amount: Amount,
                    PaymentStatus: PaymentStatus,
                    DeliveryAddress: DeliveryAddress,
                    DeliveryDate: DeliveryDate,
                    CompanyId:CompanyId
                }
            },
        },
        success: function (response) {
            if (response) {
                alert("Order Added");
                    $("#customer_CustomerName").val('');
                    $("#customer_CustomerAddress").val('');
                    $("#customer_Phone").val('');
                    $("#customer_Email").val('');
                    $("#customer_OrderReceiveDate").val('');
                    $("#order_Amount").val('');
                    $("#order_PaymentStatus").val('');
                    $("#order_DeliveryAddress").val('');
                    $("#order_DeliveryDate").val('');
                
            } else {
                alert("Order Could not be added");

                    
            }
        },
        error: function (xhr, status, error) {
            alert("Error Occurred");
                $("#customer_CustomerName").val('');
                $("#customer_CustomerAddress").val('');
                $("#customer_Phone").val('');
                $("#customer_Email").val('');
                $("#customer_OrderReceiveDate").val('');
                $("#order_Amount").val('');
                $("#order_PaymentStatus").val('');
                $("#order_DeliveryAddress").val('');
                $("#order_DeliveryDate").val('');
        }
    });
}
</script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
*@


  
@model CollegeProject.Models.OrderAndStudentModel
@{
    ViewData["Title"] = "Create Order";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Create Order – Gaubesi</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Fonts & icons -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css" />

    <!-- Dashboard CSS -->
    <link href="~/css/vendordashboard.css" rel="stylesheet" />
	<link href="~/css/order creation.css" rel="stylesheet" />
</head>
<body>
    <div class="MainDiv">
        <!-- Navbar -->
        <nav class="nav">
            <div class="logo">
                <img src="https://gaaubesi.com/static/assets/images/LOGO.gif" alt="Gaubesi Logo" />
            </div>
            <ul class="nav-links">
                <li><a asp-controller="VendorDashboard" asp-action="VendorDashboard">Home</a></li>
                <li><a asp-controller="VendorDashboard" asp-action="GetPastVendorListView">Past Records</a></li>
                <li><a asp-controller="VendorDashboard" asp-action="GetCurrentVendorListView">Live Deliveries</a></li>
                <li><a asp-controller="Project" asp-action="OrderCreation" class="active">Create Order</a></li>
                <li><a asp-controller="Log" asp-action="Logout">Logout</a></li>
            </ul>
        </nav>

        <!-- Content Card -->
        <section class="content-card">
            <h3>Create Order</h3>

            <form id="orderForm" class="form-container" onsubmit="return false;">
                @Html.AntiForgeryToken()

                <h4>Customer Details</h4>
                <div class="form-group">
                    @Html.LabelFor(m => m.customer.CustomerName)
                    @Html.TextBoxFor(m => m.customer.CustomerName, new { @class = "custom-input", required = "required" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.customer.CustomerAddress)
                    @Html.TextBoxFor(m => m.customer.CustomerAddress, new { @class = "custom-input", required = "required" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.customer.Phone)
                    @Html.TextBoxFor(m => m.customer.Phone, new { @class = "custom-input", required = "required" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.customer.Email)
                    @Html.TextBoxFor(m => m.customer.Email, new { @class = "custom-input", required = "required", type = "email" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.customer.OrderReceiveDate)
                    @Html.TextBoxFor(m => m.customer.OrderReceiveDate, new { @class = "custom-input", required = "required", type = "date" })
                </div>

                <h4>Order Details</h4>
                <div class="form-group">
                    @Html.LabelFor(m => m.order.Amount)
                    @Html.TextBoxFor(m => m.order.Amount, new { @class = "custom-input", type = "number" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.order.PaymentStatus)
                    @Html.DropDownListFor(m => m.order.PaymentStatus,
                             new SelectList(new[] { "COD", "Pre-Payment", "Online", "Credit" }),
                             "Select Payment Status",
                             new { @class = "custom-input", required = "required" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.order.DeliveryAddress)
                    @Html.TextBoxFor(m => m.order.DeliveryAddress, new { @class = "custom-input", required = "required" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.order.DeliveryDate)
                    @Html.TextBoxFor(m => m.order.DeliveryDate, new { @class = "custom-input", required = "required", type = "date" })
                </div>

                <button type="button" onclick="CreateOrder()" class="custom-submit-btn">Create Order</button>
            </form>
        </section>
    </div>

   
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        function CreateOrder() {
              var CustomerName = $("#customer_CustomerName").val();
        var CustomerAddress = $("#customer_CustomerAddress").val();
        var Phone = $("#customer_Phone").val();
        var Email = $("#customer_Email").val();
        var OrderReceiveDate = $("#customer_OrderReceiveDate").val();
        var Amount = $("#order_Amount").val();
        var PaymentStatus = $("#order_PaymentStatus").val();
        var DeliveryAddress = $("#order_DeliveryAddress").val();
        var DeliveryDate = $("#order_DeliveryDate").val();
        var CompanyId=@ViewBag.I;
        var orderAndStudentModel;
        var customer;
        var order;

                if (!Phone || !CustomerAddress || !DeliveryDate || !Amount || !OrderReceiveDate || !PaymentStatus || !Phone) {
                alert("Please fill in all the fields.");
                return ;
            }
            if (!/^(98|97)[\d]{8}$/.test(Phone) && !/^(01)[\d]{6}$/.test(Phone)) {
                alert("Customer Phone Number must start from 98/97/01 and must be of 8 or 10 numbers");
                return;
            }

            var OrderReceiveDateObj = new Date(OrderReceiveDate)
            var DeliveryDateObj = new Date(DeliveryDate)

            if(OrderReceiveDate>=DeliveryDateObj){
                alert("DeliveryDate  must be later than Order Created Date");
                return;
            }
            var emailRegex =/^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
            if(!emailRegex.test(Email)){
                alert("Invalid Email Format");
                return;
            }

        $.ajax({
            url: '@Url.Action("OrderCreation", "Project")',
            type: 'Post',
            dataType: 'Json',
            data: {
                orderAndStudentModel: {
                    customer: {
                        CustomerName: CustomerName,
                        CustomerAddress: CustomerAddress,
                        Phone: Phone,
                        Email: Email,
                        OrderReceiveDate: OrderReceiveDate
                    },
                    order: {
                        Amount: Amount,
                        PaymentStatus: PaymentStatus,
                        DeliveryAddress: DeliveryAddress,
                        DeliveryDate: DeliveryDate,
                        CompanyId:CompanyId
                    }
                },
            },
            success: function (response) {
                if (response) {
                    alert("Order Added");
                        $("#customer_CustomerName").val('');
                        $("#customer_CustomerAddress").val('');
                        $("#customer_Phone").val('');
                        $("#customer_Email").val('');
                        $("#customer_OrderReceiveDate").val('');
                        $("#order_Amount").val('');
                        $("#order_PaymentStatus").val('');
                        $("#order_DeliveryAddress").val('');
                        $("#order_DeliveryDate").val('');

                } else {
                    alert("Order Could not be added");


                }
            },
            error: function (xhr, status, error) {
                alert("Error Occurred");
                    $("#customer_CustomerName").val('');
                    $("#customer_CustomerAddress").val('');
                    $("#customer_Phone").val('');
                    $("#customer_Email").val('');
                    $("#customer_OrderReceiveDate").val('');
                    $("#order_Amount").val('');
                    $("#order_PaymentStatus").val('');
                    $("#order_DeliveryAddress").val('');
                    $("#order_DeliveryDate").val('');
            }
        });

        }
    </script>
</body>
</html>
