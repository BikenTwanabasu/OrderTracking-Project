@model CollegeProject.Models.OrderAndStudentModel

@{
    ViewData["Title"] = "Create Order";
    Layout = null;

}

<h2 style="text-align:center">Create Order</h2>


@Html.AntiForgeryToken()

<div class="form-container">
    <h3 style="text-align:center">Customer Details</h3>

  
    <div class="form-group">
        @Html.LabelFor(model => model.customer.CustomerName, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.CustomerName, new { @class = "form-control custom-input", required = "required" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.customer.CustomerAddress, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.CustomerAddress, new { @class = "form-control custom-input", required = "required" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.customer.Phone, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.Phone, new { @class = "form-control custom-input", required = "required" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.customer.Email, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.Email, new { @class = "form-control custom-input", required = "required", type = "email" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.customer.OrderReceiveDate, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.customer.OrderReceiveDate, new { @class = "form-control custom-input", required = "required", type = "date" })
    </div>

    <h3 style="text-align:center">Order Details</h3>


    <div class="form-group">
        @Html.LabelFor(model => model.order.Amount, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.order.Amount, new { @class = "form-control custom-input", type = "number" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.order.PaymentStatus, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(model => model.order.PaymentStatus,
        new SelectList(new[] { "COD", "Pre-Payment", "Online", "Credit" }),
        "Select Payment Status", new { @class = "form-control custom-input", required = "required" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.order.DeliveryAddress, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.order.DeliveryAddress, new { @class = "form-control custom-input", required = "required" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.order.DeliveryDate, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.order.DeliveryDate, new { @class = "form-control custom-input", required = "required", type = "date" })
    </div>


    <button type="submit" onclick="CreateOrder()" class="btn btn-primary custom-submit-btn">Create Order</button>
</div>

<script>
   function CreateOrder() {
    debugger;
    var CustomerName = $("#customer_CustomerName").val();
    var CustomerAddress = $("#customer_CustomerAddress").val();
    var Phone = $("#customer_Phone").val();
    var Email = $("#customer_Email").val();
    var OrderReceiveDate = $("#customer_OrderReceiveDate").val();
    var Amount = $("#order_Amount").val();
    var PaymentStatus = $("#order_PaymentStatus").val();
    var DeliveryAddress = $("#order_DeliveryAddress").val();
    var DeliveryDate = $("#order_DeliveryDate").val();
    var CompanyId=@ViewBag.I;
    var orderAndStudentModel;
    var customer;
    var order;

        if (!CustomerPhone || !OrderId || !CustomerAddress || !DeliveredDate || !Amount || !CreatedDate || !DeliveryCharge || !DeliveryStatus || !VendorPhone || !CustomerPhone) {
            alert("Please fill in all the fields.");
            return ;
        }
        if (!/^(98|97)[\d]{8}$/.test(Phone) && !/^(01)[\d]{6}$/.test(Phone)) {
            alert("Customer Phone Number must start from 98/97/01 and must be of 8 or 10 numbers");
            return;
        }

        var OrderReceiveDateObj = new Date(OrderReceiveDate)
        var DeliveryDateObj = new Date(DeliveryDate)

        if(OrderReceiveDate>=DeliveryDateObj){
            alert("DeliveryDate  must be later than Order Created Date");
            return;
        }

    $.ajax({
        url: '@Url.Action("OrderCreation","Project")',
        type: 'Post',
        dataType: 'Json',
        data: {
            orderAndStudentModel: {
                customer: {
                    CustomerName: CustomerName,
                    CustomerAddress: CustomerAddress,
                    Phone: Phone,
                    Email: Email,
                    OrderReceiveDate: OrderReceiveDate
                },
                order: {
                    Amount: Amount,
                    PaymentStatus: PaymentStatus,
                    DeliveryAddress: DeliveryAddress,
                    DeliveryDate: DeliveryDate,
                    CompanyId:CompanyId
                }
            },
        },
        success: function (response) {
            if (response) {
                alert("Order Added");
                    $("#customer_CustomerName").val('');
                    $("#customer_CustomerAddress").val('');
                    $("#customer_Phone").val('');
                    $("#customer_Email").val('');
                    $("#customer_OrderReceiveDate").val('');
                    $("#order_Amount").val('');
                    $("#order_PaymentStatus").val('');
                    $("#order_DeliveryAddress").val('');
                    $("#order_DeliveryDate").val('');
                
            } else {
                alert("Order Could not be added");

                    
            }
        },
        error: function (xhr, status, error) {
            alert("Error Occurred");
                $("#customer_CustomerName").val('');
                $("#customer_CustomerAddress").val('');
                $("#customer_Phone").val('');
                $("#customer_Email").val('');
                $("#customer_OrderReceiveDate").val('');
                $("#order_Amount").val('');
                $("#order_PaymentStatus").val('');
                $("#order_DeliveryAddress").val('');
                $("#order_DeliveryDate").val('');
        }
    });
}
</script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<style>
    *{
        font-family:Arial;

    }
    /* Style the entire form container */
    .form-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Style for each form group */
    .form-group {
        margin-bottom: 20px;
    }

    /* Label styling */
    .control-label {
        font-size: 16px;
        color: #333;
    }

    /* Input field styling */
    .custom-input {
        width: 100%;
        height: 35px;
        padding: 5px 10px;
        font-size: 14px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    /* Add some hover and focus effects to input fields */
    .custom-input:focus {
        border-color: #007bff;
        outline: none;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    /* Button styling */
    .custom-submit-btn {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .custom-submit-btn:hover {
        background-color: #0056b3;
    }

    /* Smaller input fields for a cleaner design */
    .form-group .custom-input {
        width: 48%;
        display: inline-block;
        margin-right: 4%;
    }

    .form-group .custom-input:last-child {
        margin-right: 0;
    }

</style>
